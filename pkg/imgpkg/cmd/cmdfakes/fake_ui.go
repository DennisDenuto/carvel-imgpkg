// Code generated by counterfeiter. DO NOT EDIT.
package cmdfakes

import (
	"sync"

	"github.com/cppforlife/go-cli-ui/ui"
	"github.com/cppforlife/go-cli-ui/ui/table"
)

type FakeUI struct {
	AskForChoiceStub        func(string, []string) (int, error)
	askForChoiceMutex       sync.RWMutex
	askForChoiceArgsForCall []struct {
		arg1 string
		arg2 []string
	}
	askForChoiceReturns struct {
		result1 int
		result2 error
	}
	askForChoiceReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	AskForConfirmationStub        func() error
	askForConfirmationMutex       sync.RWMutex
	askForConfirmationArgsForCall []struct {
	}
	askForConfirmationReturns struct {
		result1 error
	}
	askForConfirmationReturnsOnCall map[int]struct {
		result1 error
	}
	AskForPasswordStub        func(string) (string, error)
	askForPasswordMutex       sync.RWMutex
	askForPasswordArgsForCall []struct {
		arg1 string
	}
	askForPasswordReturns struct {
		result1 string
		result2 error
	}
	askForPasswordReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	AskForTextStub        func(string) (string, error)
	askForTextMutex       sync.RWMutex
	askForTextArgsForCall []struct {
		arg1 string
	}
	askForTextReturns struct {
		result1 string
		result2 error
	}
	askForTextReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	BeginLinefStub        func(string, ...interface{})
	beginLinefMutex       sync.RWMutex
	beginLinefArgsForCall []struct {
		arg1 string
		arg2 []interface{}
	}
	EndLinefStub        func(string, ...interface{})
	endLinefMutex       sync.RWMutex
	endLinefArgsForCall []struct {
		arg1 string
		arg2 []interface{}
	}
	ErrorLinefStub        func(string, ...interface{})
	errorLinefMutex       sync.RWMutex
	errorLinefArgsForCall []struct {
		arg1 string
		arg2 []interface{}
	}
	FlushStub        func()
	flushMutex       sync.RWMutex
	flushArgsForCall []struct {
	}
	IsInteractiveStub        func() bool
	isInteractiveMutex       sync.RWMutex
	isInteractiveArgsForCall []struct {
	}
	isInteractiveReturns struct {
		result1 bool
	}
	isInteractiveReturnsOnCall map[int]struct {
		result1 bool
	}
	PrintBlockStub        func([]byte)
	printBlockMutex       sync.RWMutex
	printBlockArgsForCall []struct {
		arg1 []byte
	}
	PrintErrorBlockStub        func(string)
	printErrorBlockMutex       sync.RWMutex
	printErrorBlockArgsForCall []struct {
		arg1 string
	}
	PrintLinefStub        func(string, ...interface{})
	printLinefMutex       sync.RWMutex
	printLinefArgsForCall []struct {
		arg1 string
		arg2 []interface{}
	}
	PrintTableStub        func(table.Table)
	printTableMutex       sync.RWMutex
	printTableArgsForCall []struct {
		arg1 table.Table
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUI) AskForChoice(arg1 string, arg2 []string) (int, error) {
	var arg2Copy []string
	if arg2 != nil {
		arg2Copy = make([]string, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.askForChoiceMutex.Lock()
	ret, specificReturn := fake.askForChoiceReturnsOnCall[len(fake.askForChoiceArgsForCall)]
	fake.askForChoiceArgsForCall = append(fake.askForChoiceArgsForCall, struct {
		arg1 string
		arg2 []string
	}{arg1, arg2Copy})
	fake.recordInvocation("AskForChoice", []interface{}{arg1, arg2Copy})
	fake.askForChoiceMutex.Unlock()
	if fake.AskForChoiceStub != nil {
		return fake.AskForChoiceStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.askForChoiceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUI) AskForChoiceCallCount() int {
	fake.askForChoiceMutex.RLock()
	defer fake.askForChoiceMutex.RUnlock()
	return len(fake.askForChoiceArgsForCall)
}

func (fake *FakeUI) AskForChoiceCalls(stub func(string, []string) (int, error)) {
	fake.askForChoiceMutex.Lock()
	defer fake.askForChoiceMutex.Unlock()
	fake.AskForChoiceStub = stub
}

func (fake *FakeUI) AskForChoiceArgsForCall(i int) (string, []string) {
	fake.askForChoiceMutex.RLock()
	defer fake.askForChoiceMutex.RUnlock()
	argsForCall := fake.askForChoiceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUI) AskForChoiceReturns(result1 int, result2 error) {
	fake.askForChoiceMutex.Lock()
	defer fake.askForChoiceMutex.Unlock()
	fake.AskForChoiceStub = nil
	fake.askForChoiceReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeUI) AskForChoiceReturnsOnCall(i int, result1 int, result2 error) {
	fake.askForChoiceMutex.Lock()
	defer fake.askForChoiceMutex.Unlock()
	fake.AskForChoiceStub = nil
	if fake.askForChoiceReturnsOnCall == nil {
		fake.askForChoiceReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.askForChoiceReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeUI) AskForConfirmation() error {
	fake.askForConfirmationMutex.Lock()
	ret, specificReturn := fake.askForConfirmationReturnsOnCall[len(fake.askForConfirmationArgsForCall)]
	fake.askForConfirmationArgsForCall = append(fake.askForConfirmationArgsForCall, struct {
	}{})
	fake.recordInvocation("AskForConfirmation", []interface{}{})
	fake.askForConfirmationMutex.Unlock()
	if fake.AskForConfirmationStub != nil {
		return fake.AskForConfirmationStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.askForConfirmationReturns
	return fakeReturns.result1
}

func (fake *FakeUI) AskForConfirmationCallCount() int {
	fake.askForConfirmationMutex.RLock()
	defer fake.askForConfirmationMutex.RUnlock()
	return len(fake.askForConfirmationArgsForCall)
}

func (fake *FakeUI) AskForConfirmationCalls(stub func() error) {
	fake.askForConfirmationMutex.Lock()
	defer fake.askForConfirmationMutex.Unlock()
	fake.AskForConfirmationStub = stub
}

func (fake *FakeUI) AskForConfirmationReturns(result1 error) {
	fake.askForConfirmationMutex.Lock()
	defer fake.askForConfirmationMutex.Unlock()
	fake.AskForConfirmationStub = nil
	fake.askForConfirmationReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUI) AskForConfirmationReturnsOnCall(i int, result1 error) {
	fake.askForConfirmationMutex.Lock()
	defer fake.askForConfirmationMutex.Unlock()
	fake.AskForConfirmationStub = nil
	if fake.askForConfirmationReturnsOnCall == nil {
		fake.askForConfirmationReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.askForConfirmationReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUI) AskForPassword(arg1 string) (string, error) {
	fake.askForPasswordMutex.Lock()
	ret, specificReturn := fake.askForPasswordReturnsOnCall[len(fake.askForPasswordArgsForCall)]
	fake.askForPasswordArgsForCall = append(fake.askForPasswordArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("AskForPassword", []interface{}{arg1})
	fake.askForPasswordMutex.Unlock()
	if fake.AskForPasswordStub != nil {
		return fake.AskForPasswordStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.askForPasswordReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUI) AskForPasswordCallCount() int {
	fake.askForPasswordMutex.RLock()
	defer fake.askForPasswordMutex.RUnlock()
	return len(fake.askForPasswordArgsForCall)
}

func (fake *FakeUI) AskForPasswordCalls(stub func(string) (string, error)) {
	fake.askForPasswordMutex.Lock()
	defer fake.askForPasswordMutex.Unlock()
	fake.AskForPasswordStub = stub
}

func (fake *FakeUI) AskForPasswordArgsForCall(i int) string {
	fake.askForPasswordMutex.RLock()
	defer fake.askForPasswordMutex.RUnlock()
	argsForCall := fake.askForPasswordArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUI) AskForPasswordReturns(result1 string, result2 error) {
	fake.askForPasswordMutex.Lock()
	defer fake.askForPasswordMutex.Unlock()
	fake.AskForPasswordStub = nil
	fake.askForPasswordReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeUI) AskForPasswordReturnsOnCall(i int, result1 string, result2 error) {
	fake.askForPasswordMutex.Lock()
	defer fake.askForPasswordMutex.Unlock()
	fake.AskForPasswordStub = nil
	if fake.askForPasswordReturnsOnCall == nil {
		fake.askForPasswordReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.askForPasswordReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeUI) AskForText(arg1 string) (string, error) {
	fake.askForTextMutex.Lock()
	ret, specificReturn := fake.askForTextReturnsOnCall[len(fake.askForTextArgsForCall)]
	fake.askForTextArgsForCall = append(fake.askForTextArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("AskForText", []interface{}{arg1})
	fake.askForTextMutex.Unlock()
	if fake.AskForTextStub != nil {
		return fake.AskForTextStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.askForTextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUI) AskForTextCallCount() int {
	fake.askForTextMutex.RLock()
	defer fake.askForTextMutex.RUnlock()
	return len(fake.askForTextArgsForCall)
}

func (fake *FakeUI) AskForTextCalls(stub func(string) (string, error)) {
	fake.askForTextMutex.Lock()
	defer fake.askForTextMutex.Unlock()
	fake.AskForTextStub = stub
}

func (fake *FakeUI) AskForTextArgsForCall(i int) string {
	fake.askForTextMutex.RLock()
	defer fake.askForTextMutex.RUnlock()
	argsForCall := fake.askForTextArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUI) AskForTextReturns(result1 string, result2 error) {
	fake.askForTextMutex.Lock()
	defer fake.askForTextMutex.Unlock()
	fake.AskForTextStub = nil
	fake.askForTextReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeUI) AskForTextReturnsOnCall(i int, result1 string, result2 error) {
	fake.askForTextMutex.Lock()
	defer fake.askForTextMutex.Unlock()
	fake.AskForTextStub = nil
	if fake.askForTextReturnsOnCall == nil {
		fake.askForTextReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.askForTextReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeUI) BeginLinef(arg1 string, arg2 ...interface{}) {
	fake.beginLinefMutex.Lock()
	fake.beginLinefArgsForCall = append(fake.beginLinefArgsForCall, struct {
		arg1 string
		arg2 []interface{}
	}{arg1, arg2})
	fake.recordInvocation("BeginLinef", []interface{}{arg1, arg2})
	fake.beginLinefMutex.Unlock()
	if fake.BeginLinefStub != nil {
		fake.BeginLinefStub(arg1, arg2...)
	}
}

func (fake *FakeUI) BeginLinefCallCount() int {
	fake.beginLinefMutex.RLock()
	defer fake.beginLinefMutex.RUnlock()
	return len(fake.beginLinefArgsForCall)
}

func (fake *FakeUI) BeginLinefCalls(stub func(string, ...interface{})) {
	fake.beginLinefMutex.Lock()
	defer fake.beginLinefMutex.Unlock()
	fake.BeginLinefStub = stub
}

func (fake *FakeUI) BeginLinefArgsForCall(i int) (string, []interface{}) {
	fake.beginLinefMutex.RLock()
	defer fake.beginLinefMutex.RUnlock()
	argsForCall := fake.beginLinefArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUI) EndLinef(arg1 string, arg2 ...interface{}) {
	fake.endLinefMutex.Lock()
	fake.endLinefArgsForCall = append(fake.endLinefArgsForCall, struct {
		arg1 string
		arg2 []interface{}
	}{arg1, arg2})
	fake.recordInvocation("EndLinef", []interface{}{arg1, arg2})
	fake.endLinefMutex.Unlock()
	if fake.EndLinefStub != nil {
		fake.EndLinefStub(arg1, arg2...)
	}
}

func (fake *FakeUI) EndLinefCallCount() int {
	fake.endLinefMutex.RLock()
	defer fake.endLinefMutex.RUnlock()
	return len(fake.endLinefArgsForCall)
}

func (fake *FakeUI) EndLinefCalls(stub func(string, ...interface{})) {
	fake.endLinefMutex.Lock()
	defer fake.endLinefMutex.Unlock()
	fake.EndLinefStub = stub
}

func (fake *FakeUI) EndLinefArgsForCall(i int) (string, []interface{}) {
	fake.endLinefMutex.RLock()
	defer fake.endLinefMutex.RUnlock()
	argsForCall := fake.endLinefArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUI) ErrorLinef(arg1 string, arg2 ...interface{}) {
	fake.errorLinefMutex.Lock()
	fake.errorLinefArgsForCall = append(fake.errorLinefArgsForCall, struct {
		arg1 string
		arg2 []interface{}
	}{arg1, arg2})
	fake.recordInvocation("ErrorLinef", []interface{}{arg1, arg2})
	fake.errorLinefMutex.Unlock()
	if fake.ErrorLinefStub != nil {
		fake.ErrorLinefStub(arg1, arg2...)
	}
}

func (fake *FakeUI) ErrorLinefCallCount() int {
	fake.errorLinefMutex.RLock()
	defer fake.errorLinefMutex.RUnlock()
	return len(fake.errorLinefArgsForCall)
}

func (fake *FakeUI) ErrorLinefCalls(stub func(string, ...interface{})) {
	fake.errorLinefMutex.Lock()
	defer fake.errorLinefMutex.Unlock()
	fake.ErrorLinefStub = stub
}

func (fake *FakeUI) ErrorLinefArgsForCall(i int) (string, []interface{}) {
	fake.errorLinefMutex.RLock()
	defer fake.errorLinefMutex.RUnlock()
	argsForCall := fake.errorLinefArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUI) Flush() {
	fake.flushMutex.Lock()
	fake.flushArgsForCall = append(fake.flushArgsForCall, struct {
	}{})
	fake.recordInvocation("Flush", []interface{}{})
	fake.flushMutex.Unlock()
	if fake.FlushStub != nil {
		fake.FlushStub()
	}
}

func (fake *FakeUI) FlushCallCount() int {
	fake.flushMutex.RLock()
	defer fake.flushMutex.RUnlock()
	return len(fake.flushArgsForCall)
}

func (fake *FakeUI) FlushCalls(stub func()) {
	fake.flushMutex.Lock()
	defer fake.flushMutex.Unlock()
	fake.FlushStub = stub
}

func (fake *FakeUI) IsInteractive() bool {
	fake.isInteractiveMutex.Lock()
	ret, specificReturn := fake.isInteractiveReturnsOnCall[len(fake.isInteractiveArgsForCall)]
	fake.isInteractiveArgsForCall = append(fake.isInteractiveArgsForCall, struct {
	}{})
	fake.recordInvocation("IsInteractive", []interface{}{})
	fake.isInteractiveMutex.Unlock()
	if fake.IsInteractiveStub != nil {
		return fake.IsInteractiveStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.isInteractiveReturns
	return fakeReturns.result1
}

func (fake *FakeUI) IsInteractiveCallCount() int {
	fake.isInteractiveMutex.RLock()
	defer fake.isInteractiveMutex.RUnlock()
	return len(fake.isInteractiveArgsForCall)
}

func (fake *FakeUI) IsInteractiveCalls(stub func() bool) {
	fake.isInteractiveMutex.Lock()
	defer fake.isInteractiveMutex.Unlock()
	fake.IsInteractiveStub = stub
}

func (fake *FakeUI) IsInteractiveReturns(result1 bool) {
	fake.isInteractiveMutex.Lock()
	defer fake.isInteractiveMutex.Unlock()
	fake.IsInteractiveStub = nil
	fake.isInteractiveReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeUI) IsInteractiveReturnsOnCall(i int, result1 bool) {
	fake.isInteractiveMutex.Lock()
	defer fake.isInteractiveMutex.Unlock()
	fake.IsInteractiveStub = nil
	if fake.isInteractiveReturnsOnCall == nil {
		fake.isInteractiveReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isInteractiveReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeUI) PrintBlock(arg1 []byte) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.printBlockMutex.Lock()
	fake.printBlockArgsForCall = append(fake.printBlockArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	fake.recordInvocation("PrintBlock", []interface{}{arg1Copy})
	fake.printBlockMutex.Unlock()
	if fake.PrintBlockStub != nil {
		fake.PrintBlockStub(arg1)
	}
}

func (fake *FakeUI) PrintBlockCallCount() int {
	fake.printBlockMutex.RLock()
	defer fake.printBlockMutex.RUnlock()
	return len(fake.printBlockArgsForCall)
}

func (fake *FakeUI) PrintBlockCalls(stub func([]byte)) {
	fake.printBlockMutex.Lock()
	defer fake.printBlockMutex.Unlock()
	fake.PrintBlockStub = stub
}

func (fake *FakeUI) PrintBlockArgsForCall(i int) []byte {
	fake.printBlockMutex.RLock()
	defer fake.printBlockMutex.RUnlock()
	argsForCall := fake.printBlockArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUI) PrintErrorBlock(arg1 string) {
	fake.printErrorBlockMutex.Lock()
	fake.printErrorBlockArgsForCall = append(fake.printErrorBlockArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("PrintErrorBlock", []interface{}{arg1})
	fake.printErrorBlockMutex.Unlock()
	if fake.PrintErrorBlockStub != nil {
		fake.PrintErrorBlockStub(arg1)
	}
}

func (fake *FakeUI) PrintErrorBlockCallCount() int {
	fake.printErrorBlockMutex.RLock()
	defer fake.printErrorBlockMutex.RUnlock()
	return len(fake.printErrorBlockArgsForCall)
}

func (fake *FakeUI) PrintErrorBlockCalls(stub func(string)) {
	fake.printErrorBlockMutex.Lock()
	defer fake.printErrorBlockMutex.Unlock()
	fake.PrintErrorBlockStub = stub
}

func (fake *FakeUI) PrintErrorBlockArgsForCall(i int) string {
	fake.printErrorBlockMutex.RLock()
	defer fake.printErrorBlockMutex.RUnlock()
	argsForCall := fake.printErrorBlockArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUI) PrintLinef(arg1 string, arg2 ...interface{}) {
	fake.printLinefMutex.Lock()
	fake.printLinefArgsForCall = append(fake.printLinefArgsForCall, struct {
		arg1 string
		arg2 []interface{}
	}{arg1, arg2})
	fake.recordInvocation("PrintLinef", []interface{}{arg1, arg2})
	fake.printLinefMutex.Unlock()
	if fake.PrintLinefStub != nil {
		fake.PrintLinefStub(arg1, arg2...)
	}
}

func (fake *FakeUI) PrintLinefCallCount() int {
	fake.printLinefMutex.RLock()
	defer fake.printLinefMutex.RUnlock()
	return len(fake.printLinefArgsForCall)
}

func (fake *FakeUI) PrintLinefCalls(stub func(string, ...interface{})) {
	fake.printLinefMutex.Lock()
	defer fake.printLinefMutex.Unlock()
	fake.PrintLinefStub = stub
}

func (fake *FakeUI) PrintLinefArgsForCall(i int) (string, []interface{}) {
	fake.printLinefMutex.RLock()
	defer fake.printLinefMutex.RUnlock()
	argsForCall := fake.printLinefArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUI) PrintTable(arg1 table.Table) {
	fake.printTableMutex.Lock()
	fake.printTableArgsForCall = append(fake.printTableArgsForCall, struct {
		arg1 table.Table
	}{arg1})
	fake.recordInvocation("PrintTable", []interface{}{arg1})
	fake.printTableMutex.Unlock()
	if fake.PrintTableStub != nil {
		fake.PrintTableStub(arg1)
	}
}

func (fake *FakeUI) PrintTableCallCount() int {
	fake.printTableMutex.RLock()
	defer fake.printTableMutex.RUnlock()
	return len(fake.printTableArgsForCall)
}

func (fake *FakeUI) PrintTableCalls(stub func(table.Table)) {
	fake.printTableMutex.Lock()
	defer fake.printTableMutex.Unlock()
	fake.PrintTableStub = stub
}

func (fake *FakeUI) PrintTableArgsForCall(i int) table.Table {
	fake.printTableMutex.RLock()
	defer fake.printTableMutex.RUnlock()
	argsForCall := fake.printTableArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.askForChoiceMutex.RLock()
	defer fake.askForChoiceMutex.RUnlock()
	fake.askForConfirmationMutex.RLock()
	defer fake.askForConfirmationMutex.RUnlock()
	fake.askForPasswordMutex.RLock()
	defer fake.askForPasswordMutex.RUnlock()
	fake.askForTextMutex.RLock()
	defer fake.askForTextMutex.RUnlock()
	fake.beginLinefMutex.RLock()
	defer fake.beginLinefMutex.RUnlock()
	fake.endLinefMutex.RLock()
	defer fake.endLinefMutex.RUnlock()
	fake.errorLinefMutex.RLock()
	defer fake.errorLinefMutex.RUnlock()
	fake.flushMutex.RLock()
	defer fake.flushMutex.RUnlock()
	fake.isInteractiveMutex.RLock()
	defer fake.isInteractiveMutex.RUnlock()
	fake.printBlockMutex.RLock()
	defer fake.printBlockMutex.RUnlock()
	fake.printErrorBlockMutex.RLock()
	defer fake.printErrorBlockMutex.RUnlock()
	fake.printLinefMutex.RLock()
	defer fake.printLinefMutex.RUnlock()
	fake.printTableMutex.RLock()
	defer fake.printTableMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ui.UI = new(FakeUI)
