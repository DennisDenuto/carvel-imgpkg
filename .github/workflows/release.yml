name: goreleaser

on:
  push:
    tags:
      - 'v*'

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      -
        name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16.0
      -
        name: Run GoReleaser
        uses: goreleaser/goreleaser-action@5e15885530fb01d81d1f24e8a6f54ebbd0fed7eb
        if: startsWith(github.ref, 'refs/tags/')
        with:
          version: 0.162.0
          args: release --rm-dist --debug
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      -
        uses: actions/github-script@v4
        id: get-checksums-from-draft-release
        if: startsWith(github.ref, 'refs/tags/')
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          result-encoding: string
          script: |
            var crypto = require('crypto');
            const { owner, repo } = context.repo;

            // https://docs.github.com/en/rest/reference/repos#list-releases
            // https://octokit.github.io/rest.js/v18#repos-list-releases
            var releases = await github.repos.listReleases({
              owner: owner,
              repo: repo
            });

            var crypto = require('crypto')
            var fs = require('fs')
            const url = require('url');
            const https = require('https');

            checksums = {}
            for (const r of releases["data"]) {
              if (r.draft && `refs/tags/${r.tag_name}` == "${{ github.ref }}") {
                for (const asset of r.assets) {
                  var release_asset = await github.repos.getReleaseAsset({ headers: {accept: `application/octet-stream`}, accept: `application/octet-stream`, owner: owner, repo: repo, asset_id: asset.id });
                  const hash = crypto.createHash('sha256');

                  let http_promise = new Promise((resolve, reject) => {
                    https.get(release_asset.url, (stream) => {
                      stream.on('data', function (data) {
                        hash.update(data);
                      });
                      stream.on('end', function () {
                        checksums[asset.name]= hash.digest('hex');
                        resolve(`${asset.name}`);
                      });
                    });
                  });
                  await http_promise;
                }
              }
            }
            console.log(checksums)

            return `${checksums['imgpkg-darwin-amd64']}  ./imgpkg-darwin-amd64
            ${checksums['imgpkg-darwin-arm64']}  ./imgpkg-darwin-arm64
            ${checksums['imgpkg-linux-amd64']}  ./imgpkg-linux-amd64
            ${checksums['imgpkg-windows-amd64.exe']}  ./imgpkg-windows-amd64.exe`

      -
        name: verify uploaded artifacts
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          set -e -x
          VERSION=`echo ${{ github.ref }}  | grep -Eo '[0-9].*'`

          ./hack/build-binaries.sh "$VERSION" > ./go-checksums
          cat ./go-checksums
          diff ./go-checksums <(cat <<EOF
          ${{steps.get-checksums-from-draft-release.outputs.result}}
          EOF
          )

      - name: imgpkg Formula
        id: get-homebrew-formula
        run: |
          echo 'HOMEBREW_FORMULA<<EOF' >> $GITHUB_ENV
          cat ./dist/imgpkg.rb | sed 's/"/\\"/g' >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
          repository: vmware-tanzu/homebrew-carvel
          ref: develop
      - name: Update homebrew
        run: |
          cat ./imgpkg.rb
          echo "${{ env.HOMEBREW_FORMULA }}" > ./imgpkg.rb
          cat ./imgpkg.rb
      - name: Commit & Push changes
        with:
          AUTHOR_NAME: "k8slt"
          AUTHOR_EMAIL: "klt@groups.vmware.com"
          REPOSITORY: "vmware-tanzu/homebrew-carvel"
          BRANCH: "imgpkg-homebrew"
          FORCE: true
          GITHUB_TOKEN: ${{ secrets.HOMEBREW_TOKEN }}
        run: |
          set -e

          timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          AUTHOR_EMAIL=${AUTHOR_EMAIL:-'github-actions[bot]@users.noreply.github.com'}
          AUTHOR_NAME=${AUTHOR_NAME:-'github-actions[bot]'}
          MESSAGE=${MESSAGE:-"chore: autopublish ${timestamp}"}
          BRANCH=${BRANCH:-develop}
          FORCE=${FORCE:-false}
          REPOSITORY=${REPOSITORY:-$GITHUB_REPOSITORY}

          echo "Push to branch $BRANCH";
          [ -z "${GITHUB_TOKEN}" ] && {
              echo 'Missing input "github_token: ${{ secrets.GITHUB_TOKEN }}".';
              exit 1;
          };

          if ${FORCE}; then
              _FORCE_OPTION='--force'
          fi

          remote_repo="https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${REPOSITORY}.git"

          git config http.sslVerify false
          git config --local user.email "${AUTHOR_EMAIL}"
          git config --local user.name "${AUTHOR_NAME}"

          git add -A

          git commit -m "{$MESSAGE}" $_EMPTY || exit 0

          git push "${remote_repo}" HEAD:"${BRANCH}" --follow-tags $_FORCE_OPTION;