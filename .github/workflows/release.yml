name: goreleaser

on:
  push:
    tags:
      - 'v*'

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16.0
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@5e15885530fb01d81d1f24e8a6f54ebbd0fed7eb
        if: startsWith(github.ref, 'refs/tags/')
        with:
          version: 0.162.0
          args: release --rm-dist --debug ${{ env.SKIP_PUBLISH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/github-script@v4
        id: get-checksums-from-draft-release
        if: startsWith(github.ref, 'refs/tags/') && ${{ !env.ACT }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          result-encoding: string
          script: |
            var crypto = require('crypto');
            const { owner, repo } = context.repo;

            // https://docs.github.com/en/rest/reference/repos#list-releases
            // https://octokit.github.io/rest.js/v18#repos-list-releases
            var releases = await github.repos.listReleases({
              owner: owner,
              repo: repo
            });

            var crypto = require('crypto')
            var fs = require('fs')
            const url = require('url');
            const https = require('https');

            checksums = {}
            for (const r of releases["data"]) {
              if (r.draft && `refs/tags/${r.tag_name}` == "${{ github.ref }}") {
                for (const asset of r.assets) {
                  var release_asset = await github.repos.getReleaseAsset({ headers: {accept: `application/octet-stream`}, accept: `application/octet-stream`, owner: owner, repo: repo, asset_id: asset.id });
                  const hash = crypto.createHash('sha256');

                  let http_promise = new Promise((resolve, reject) => {
                    https.get(release_asset.url, (stream) => {
                      stream.on('data', function (data) {
                        hash.update(data);
                      });
                      stream.on('end', function () {
                        checksums[asset.name]= hash.digest('hex');
                        resolve(`${asset.name}`);
                      });
                    });
                  });
                  await http_promise;
                }
              }
            }
            console.log(checksums)

            return `${checksums['imgpkg-darwin-amd64']}  ./imgpkg-darwin-amd64
            ${checksums['imgpkg-darwin-arm64']}  ./imgpkg-darwin-arm64
            ${checksums['imgpkg-linux-amd64']}  ./imgpkg-linux-amd64
            ${checksums['imgpkg-windows-amd64.exe']}  ./imgpkg-windows-amd64.exe`

      - name: verify uploaded artifacts
        if: startsWith(github.ref, 'refs/tags/') && ${{ !env.ACT }}
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          set -e -x
          VERSION=`echo ${{ github.ref }}  | grep -Eo '[0-9].*'`

          ./hack/build-binaries.sh "$VERSION" > ./go-checksums
          cat ./go-checksums
          diff ./go-checksums <(cat <<EOF
          ${{steps.get-checksums-from-draft-release.outputs.result}}
          EOF
          )

      - name: Upload Checksums
        uses: actions/upload-artifact@v2
        with:
          name: checksums
          path: ./go-checksums

  carvel-release-scripts:
    needs: goreleaser
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
          repository: vmware-tanzu/carvel-release-scripts
          ref: main
          ssh-key: ${{ secrets.CARVEL_RELEASE_SCRIPTS_DEPLOY_PRIVATE_KEY }}
      - name: Download checksums
        uses: actions/download-artifact@v2
        id: download-checksums
        with:
          name: checksums
          path: ~/checksums
      - name: Update homebrew
        run: |
          VERSION=`echo ${{ github.ref }}  | grep -Eo '[0-9].*'`

          tree .
          # EXAMPLE checksum line:
          # 0837efa4e30fc3f934479d1bd183cfd97ec96f7f3cfab0892be7f39308908993  imgpkg-linux-amd64
          function map_checksums_to_assets() {
            cat ${{steps.download-checksums.outputs.download-path}} | while read line; do
              filename=$(echo $line | awk '{print $2}')
              os=$(echo $filename | awk -F\- '{print $2}')
              arch=$(echo $filename | awk -F\- '{print $3}' |  sed -e "s/\..*$//")
              sha256=$(echo $line | awk '{print $1}')

              echo "
              - os: ${os}
                arch: ${arch}
                shasum: ${sha256}
                filename: ${filename}"
            done
          }

          cat <<EOF >releases/imgpkg/$VERSION
          #@data/values
          ---
          version: v${VERSION}
          assets:
            $(map_checksums_to_assets)

          github:
            url: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY
          EOF

          cat releases/imgpkg/$VERSION

      - name: Commit & Push changes
        if: ${{ !env.ACT }}
        env:
          AUTHOR_NAME: "k8slt"
          AUTHOR_EMAIL: "klt@groups.vmware.com"
          REPOSITORY: "vmware-tanzu/carvel-release-scripts"
          BRANCH: "imgpkg-homebrew"
          FORCE: true
        run: |
          set -e

          timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          AUTHOR_EMAIL=${AUTHOR_EMAIL:-'github-actions[bot]@users.noreply.github.com'}
          AUTHOR_NAME=${AUTHOR_NAME:-'github-actions[bot]'}
          MESSAGE=${MESSAGE:-"chore: autopublish ${timestamp}"}
          FORCE=${FORCE:-false}
          REPOSITORY=${REPOSITORY:-$GITHUB_REPOSITORY}

          echo "Push to branch $BRANCH";
          [ -z "${BRANCH}" ] && {
            echo 'Missing branch';
            exit 1;
          };

          if ${FORCE}; then
              _FORCE_OPTION='--force'
          fi

          remote_repo="git@github.com:${REPOSITORY}"

          git config http.sslVerify false
          git config --local user.email "${AUTHOR_EMAIL}"
          git config --local user.name "${AUTHOR_NAME}"

          git add -A

          git commit -m "${MESSAGE}" $_EMPTY || exit 0

          git push "${remote_repo}" HEAD:"${BRANCH}" --follow-tags $_FORCE_OPTION;