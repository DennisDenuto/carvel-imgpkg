name: goreleaser

on:
  push:
    tags:
      - 'v*'

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # undocumented OIDC support.
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: sigstore/cosign-installer@main
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17.0

      # Install gcloud, do not specify authentication.
      - uses: 'google-github-actions/setup-gcloud@master'
        env:
          PROJECT_ID: ${{ secrets.PROJECT_ID }}
        with:
          project_id: ${{ secrets.PROJECT_ID }}

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v0.3.1'
        env:
          PROJECT_ID: ${{ secrets.PROJECT_ID }}
          PROJECT_ID_INT: ${{ secrets.PROJECT_ID_INT }}
        with:
          token_format: 'access_token'
          workload_identity_provider: 'projects/${{ env.PROJECT_ID_INT }}/locations/global/workloadIdentityPools/test-carvel-signing-release-pool/providers/test-carvel-github-provider'
          service_account: test-kms-service-account@${{ env.PROJECT_ID }}.iam.gserviceaccount.com

      - id: 'gcloud'
        name: 'gcloud'
        run: |-
          gcloud auth login --brief --cred-file="${{ steps.auth.outputs.credentials_file_path }}"

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@5e15885530fb01d81d1f24e8a6f54ebbd0fed7eb
        if: startsWith(github.ref, 'refs/tags/')
        with:
          version: 0.181.1
          args: release --rm-dist --debug ${{ env.SKIP_PUBLISH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PROJECT_ID: ${{ secrets.PROJECT_ID }}
          KEY_LOCATION: ${{ secrets.KEY_LOCATION }}
          KEY_RING: ${{ secrets.KEY_RING }}
          KEY_NAME: ${{ secrets.KEY_NAME }}
          KEY_VERSION: ${{ secrets.KEY_VERSION }}
      - uses: actions/github-script@v4
        id: get-checksums-from-draft-release
        if: startsWith(github.ref, 'refs/tags/') && ${{ !env.ACT }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          result-encoding: string
          script: |
            var crypto = require('crypto');
            const { owner, repo } = context.repo;

            // https://docs.github.com/en/rest/reference/repos#list-releases
            // https://octokit.github.io/rest.js/v18#repos-list-releases
            var releases = await github.repos.listReleases({
              owner: owner,
              repo: repo
            });

            var crypto = require('crypto')
            var fs = require('fs')
            const url = require('url');
            const https = require('https');

            checksums = {}
            for (const r of releases["data"]) {
              if (r.draft && `refs/tags/${r.tag_name}` == "${{ github.ref }}") {
                for (const asset of r.assets) {
                  var release_asset = await github.repos.getReleaseAsset({ headers: {accept: `application/octet-stream`}, accept: `application/octet-stream`, owner: owner, repo: repo, asset_id: asset.id });
                  const hash = crypto.createHash('sha256');

                  let http_promise = new Promise((resolve, reject) => {
                    https.get(release_asset.url, (stream) => {
                      stream.on('data', function (data) {
                        hash.update(data);
                      });
                      stream.on('end', function () {
                        checksums[asset.name]= hash.digest('hex');
                        resolve(`${asset.name}`);
                      });
                    });
                  });
                  await http_promise;
                }
              }
            }
            console.log(checksums)

            return `${checksums['imgpkg-darwin-amd64']}  ./imgpkg-darwin-amd64
            ${checksums['imgpkg-darwin-arm64']}  ./imgpkg-darwin-arm64
            ${checksums['imgpkg-linux-amd64']}  ./imgpkg-linux-amd64
            ${checksums['imgpkg-windows-amd64.exe']}  ./imgpkg-windows-amd64.exe`

      - name: verify uploaded artifacts
        if: startsWith(github.ref, 'refs/tags/') && ${{ !env.ACT }}
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          set -e -x
          VERSION=`echo ${{ github.ref }}  | grep -Eo '[0-9].*'`

          ./hack/build-binaries.sh "$VERSION" > ./go-checksums
          cat ./go-checksums
          diff ./go-checksums <(cat <<EOF
          ${{steps.get-checksums-from-draft-release.outputs.result}}
          EOF
          )

      - name: Upload Checksums
        uses: actions/upload-artifact@v2
        with:
          name: checksums
          path: ./go-checksums